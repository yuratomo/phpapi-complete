call phpapi#class('Collection', '', [
  \ phpapi#method('append(', 'mixed $value)', 'bool'),
  \ phpapi#method('assign(', 'OCI-Collection $from)', 'bool'),
  \ phpapi#method('assignElem(', 'int $index , mixed $value)', 'bool'),
  \ phpapi#method('free(', 'void)', 'bool'),
  \ phpapi#method('getElem(', 'int $index)', 'mixed'),
  \ phpapi#method('max(', 'void)', 'int'),
  \ phpapi#method('size(', 'void)', 'int'),
  \ phpapi#method('trim(', 'int $num)', 'bool'),
  \ ])

call phpapi#class('DOMNode', '', [
  \ phpapi#method('add_namespace(', 'string $uri , string $prefix)', 'bool'),
  \ phpapi#method('append_child(', 'DOMNode $newnode)', 'DOMNode'),
  \ ])

call phpapi#class('DomAttribute', '', [
  \ phpapi#method('name(', 'void)', 'string'),
  \ phpapi#method('set_value(', 'string $content)', 'bool'),
  \ phpapi#method('specified(', 'void)', 'bool'),
  \ phpapi#method('value(', 'void)', 'string'),
  \ ])

call phpapi#class('DomDocumentType', '', [
  \ phpapi#method('PUBLIC_id(', 'void)', 'string'),
  \ phpapi#method('entities(', 'void)', 'array'),
  \ phpapi#method('internal_subset(', 'void)', 'bool'),
  \ phpapi#method('name(', 'void)', 'string'),
  \ phpapi#method('notations(', 'void)', 'array'),
  \ phpapi#method('system_id(', 'void)', 'string'),
  \ ])

call phpapi#class('DomElement', '', [
  \ phpapi#method('get_attribute(', 'string $name)', 'string'),
  \ phpapi#method('get_attribute_node(', 'string $name)', 'DomAttribute'),
  \ phpapi#method('get_elements_by_tagname(', 'string $name)', 'array'),
  \ phpapi#method('has_attribute(', 'string $name)', 'bool'),
  \ phpapi#method('remove_attribute(', 'string $name)', 'bool'),
  \ phpapi#method('set_attribute(', 'string $name , string $value)', 'DomAttribute'),
  \ phpapi#method('set_attribute_node(', 'DomNode $attr)', 'DomNode'),
  \ phpapi#method('tagname(', 'void)', 'string'),
  \ ])

call phpapi#class('DomProcessingInstruction', '', [
  \ phpapi#method('data(', 'void)', 'string'),
  \ phpapi#method('target(', 'void)', 'string'),
  \ ])

call phpapi#class('DomXsltStylesheet', '', [
  \ phpapi#method('process(', 'DomDocument $xml_doc [, array $xslt_params [, bool $is_xpath_param [, string $profile_filename ]]])', 'DomDocument'),
  \ phpapi#method('result_dump_file(', 'DomDocument $xmldoc , string $filename)', 'string'),
  \ phpapi#method('result_dump_mem(', 'DomDocument $xmldoc)', 'string'),
  \ ])

call phpapi#class('HaruAnnotation', '', [
  \ phpapi#method('setBorderStyle(', 'float $width , int $dash_on , int $dash_off)', 'bool'),
  \ phpapi#method('setHighlightMode(', 'int $mode)', 'bool'),
  \ phpapi#method('setIcon(', 'int $icon)', 'bool'),
  \ phpapi#method('setOpened(', 'bool $opened)', 'bool'),
  \ ])

call phpapi#class('HaruDestination', '', [
  \ phpapi#method('setFit(', 'void)', 'bool'),
  \ phpapi#method('setFitB(', 'void)', 'bool'),
  \ phpapi#method('setFitBH(', 'float $top)', 'bool'),
  \ phpapi#method('setFitBV(', 'float $left)', 'bool'),
  \ phpapi#method('setFitH(', 'float $top)', 'bool'),
  \ phpapi#method('setFitR(', 'float $left , float $bottom , float $right , float $top)', 'bool'),
  \ phpapi#method('setFitV(', 'float $left)', 'bool'),
  \ phpapi#method('setXYZ(', 'float $left , float $top , float $zoom)', 'bool'),
  \ ])

call phpapi#class('HaruDoc', '', [
  \ phpapi#method('addPage(', 'void)', 'object'),
  \ phpapi#method('addPageLabel(', 'int $first_page , int $style , int $first_num [, string $prefix = "" ])', 'bool'),
  \ phpapi#method('createOutline(', 'string $title [, object $parent_outline [, object $encoder ]])', 'object'),
  \ phpapi#method('getCurrentEncoder(', 'void)', 'object'),
  \ phpapi#method('getCurrentPage(', 'void)', 'object'),
  \ phpapi#method('getEncoder(', 'string $encoding)', 'object'),
  \ phpapi#method('getFont(', 'string $fontname [, string $encoding ])', 'object'),
  \ phpapi#method('getInfoAttr(', 'int $type)', 'string'),
  \ phpapi#method('getPageLayout(', 'void)', 'int'),
  \ phpapi#method('getPageMode(', 'void)', 'int'),
  \ phpapi#method('getStreamSize(', 'void)', 'int'),
  \ phpapi#method('insertPage(', 'object $page)', 'object'),
  \ phpapi#method('loadJPEG(', 'string $filename)', 'object'),
  \ phpapi#method('loadPNG(', 'string $filename [, bool $deferred = false ])', 'object'),
  \ phpapi#method('loadRaw(', 'string $filename , int $width , int $height , int $color_space)', 'object'),
  \ phpapi#method('loadTTC(', 'string $fontfile , int $index [, bool $embed = false ])', 'string'),
  \ phpapi#method('loadTTF(', 'string $fontfile [, bool $embed = false ])', 'string'),
  \ phpapi#method('loadType1(', 'string $afmfile [, string $pfmfile ])', 'string'),
  \ phpapi#method('output(', 'void)', 'bool'),
  \ phpapi#method('readFromStream(', 'int $bytes)', 'string'),
  \ phpapi#method('resetError(', 'void)', 'bool'),
  \ phpapi#method('resetStream(', 'void)', 'bool'),
  \ phpapi#method('save(', 'string $file)', 'bool'),
  \ phpapi#method('saveToStream(', 'void)', 'bool'),
  \ phpapi#method('setCompressionMode(', 'int $mode)', 'bool'),
  \ phpapi#method('setCurrentEncoder(', 'string $encoding)', 'bool'),
  \ phpapi#method('setEncryptionMode(', 'int $mode [, int $key_len = 5 ])', 'bool'),
  \ phpapi#method('setInfoAttr(', 'int $type , string $info)', 'bool'),
  \ phpapi#method('setInfoDateAttr(', 'int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min)', 'bool'),
  \ phpapi#method('setOpenAction(', 'object $destination)', 'bool'),
  \ phpapi#method('setPageLayout(', 'int $layout)', 'bool'),
  \ phpapi#method('setPageMode(', 'int $mode)', 'bool'),
  \ phpapi#method('setPagesConfiguration(', 'int $page_per_pages)', 'bool'),
  \ phpapi#method('setPassword(', 'string $owner_password , string $user_password)', 'bool'),
  \ phpapi#method('setPermission(', 'int $permission)', 'bool'),
  \ phpapi#method('useCNSEncodings(', 'void)', 'bool'),
  \ phpapi#method('useCNSFonts(', 'void)', 'bool'),
  \ phpapi#method('useCNTEncodings(', 'void)', 'bool'),
  \ phpapi#method('useCNTFonts(', 'void)', 'bool'),
  \ phpapi#method('useJPEncodings(', 'void)', 'bool'),
  \ phpapi#method('useJPFonts(', 'void)', 'bool'),
  \ phpapi#method('useKREncodings(', 'void)', 'bool'),
  \ phpapi#method('useKRFonts(', 'void)', 'bool'),
  \ ])

call phpapi#class('HaruEncoder', '', [
  \ phpapi#method('getByteType(', 'string $text , int $index)', 'int'),
  \ phpapi#method('getType(', 'void)', 'int'),
  \ phpapi#method('getUnicode(', 'int $character)', 'int'),
  \ phpapi#method('getWritingMode(', 'void)', 'int'),
  \ ])

call phpapi#class('HaruFont', '', [
  \ phpapi#method('getAscent(', 'void)', 'int'),
  \ phpapi#method('getCapHeight(', 'void)', 'int'),
  \ phpapi#method('getDescent(', 'void)', 'int'),
  \ phpapi#method('getEncodingName(', 'void)', 'string'),
  \ phpapi#method('getFontName(', 'void)', 'string'),
  \ phpapi#method('getTextWidth(', 'string $text)', 'array'),
  \ phpapi#method('getUnicodeWidth(', 'int $character)', 'int'),
  \ phpapi#method('getXHeight(', 'void)', 'int'),
  \ phpapi#method('measureText(', 'string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap = false ])', 'int'),
  \ ])

call phpapi#class('HaruImage', '', [
  \ phpapi#method('getBitsPerComponent(', 'void)', 'int'),
  \ phpapi#method('getColorSpace(', 'void)', 'string'),
  \ phpapi#method('getHeight(', 'void)', 'int'),
  \ phpapi#method('getSize(', 'void)', 'array'),
  \ phpapi#method('getWidth(', 'void)', 'int'),
  \ phpapi#method('setColorMask(', 'int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax)', 'bool'),
  \ phpapi#method('setMaskImage(', 'object $mask_image)', 'bool'),
  \ ])

call phpapi#class('HaruOutline', '', [
  \ phpapi#method('setDestination(', 'object $destination)', 'bool'),
  \ phpapi#method('setOpened(', 'bool $opened)', 'bool'),
  \ ])

call phpapi#class('HaruPage', '', [
  \ phpapi#method('arc(', 'float $x , float $y , float $ray , float $ang1 , float $ang2)', 'bool'),
  \ phpapi#method('beginText(', 'void)', 'bool'),
  \ phpapi#method('circle(', 'float $x , float $y , float $ray)', 'bool'),
  \ phpapi#method('closePath(', 'void)', 'bool'),
  \ phpapi#method('concat(', 'float $a , float $b , float $c , float $d , float $x , float $y)', 'bool'),
  \ phpapi#method('createDestination(', 'void)', 'object'),
  \ phpapi#method('createLinkAnnotation(', 'array $rectangle , object $destination)', 'object'),
  \ phpapi#method('createTextAnnotation(', 'array $rectangle , string $text [, object $encoder ])', 'object'),
  \ phpapi#method('createURLAnnotation(', 'array $rectangle , string $url)', 'object'),
  \ phpapi#method('curveTo(', 'float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3)', 'bool'),
  \ phpapi#method('curveTo2(', 'float $x2 , float $y2 , float $x3 , float $y3)', 'bool'),
  \ phpapi#method('curveTo3(', 'float $x1 , float $y1 , float $x3 , float $y3)', 'bool'),
  \ phpapi#method('drawImage(', 'object $image , float $x , float $y , float $width , float $height)', 'bool'),
  \ phpapi#method('ellipse(', 'float $x , float $y , float $xray , float $yray)', 'bool'),
  \ phpapi#method('endPath(', 'void)', 'bool'),
  \ phpapi#method('endText(', 'void)', 'bool'),
  \ phpapi#method('eoFillStroke(', '[ bool $close_path = false ])', 'bool'),
  \ phpapi#method('eofill(', 'void)', 'bool'),
  \ phpapi#method('fill(', 'void)', 'bool'),
  \ phpapi#method('fillStroke(', '[ bool $close_path = false ])', 'bool'),
  \ phpapi#method('getCMYKFill(', 'void)', 'array'),
  \ phpapi#method('getCMYKStroke(', 'void)', 'array'),
  \ phpapi#method('getCharSpace(', 'void)', 'float'),
  \ phpapi#method('getCurrentFont(', 'void)', 'object'),
  \ phpapi#method('getCurrentFontSize(', 'void)', 'float'),
  \ phpapi#method('getCurrentPos(', 'void)', 'array'),
  \ phpapi#method('getCurrentTextPos(', 'void)', 'array'),
  \ phpapi#method('getDash(', 'void)', 'array'),
  \ phpapi#method('getFillingColorSpace(', 'void)', 'int'),
  \ phpapi#method('getFlatness(', 'void)', 'float'),
  \ phpapi#method('getGMode(', 'void)', 'int'),
  \ phpapi#method('getGrayFill(', 'void)', 'float'),
  \ phpapi#method('getGrayStroke(', 'void)', 'float'),
  \ phpapi#method('getHeight(', 'void)', 'float'),
  \ phpapi#method('getHorizontalScaling(', 'void)', 'float'),
  \ phpapi#method('getLineCap(', 'void)', 'int'),
  \ phpapi#method('getLineJoin(', 'void)', 'int'),
  \ phpapi#method('getLineWidth(', 'void)', 'float'),
  \ phpapi#method('getMiterLimit(', 'void)', 'float'),
  \ phpapi#method('getRGBFill(', 'void)', 'array'),
  \ phpapi#method('getRGBStroke(', 'void)', 'array'),
  \ phpapi#method('getStrokingColorSpace(', 'void)', 'int'),
  \ phpapi#method('getTextLeading(', 'void)', 'float'),
  \ phpapi#method('getTextMatrix(', 'void)', 'array'),
  \ phpapi#method('getTextRenderingMode(', 'void)', 'int'),
  \ phpapi#method('getTextRise(', 'void)', 'float'),
  \ phpapi#method('getTextWidth(', 'string $text)', 'float'),
  \ phpapi#method('getTransMatrix(', 'void)', 'array'),
  \ phpapi#method('getWidth(', 'void)', 'float'),
  \ phpapi#method('getWordSpace(', 'void)', 'float'),
  \ phpapi#method('lineTo(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('measureText(', 'string $text , float $width [, bool $wordwrap = false ])', 'int'),
  \ phpapi#method('moveTextPos(', 'float $x , float $y [, bool $set_leading = false ])', 'bool'),
  \ phpapi#method('moveTo(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('moveToNextLine(', 'void)', 'bool'),
  \ phpapi#method('rectangle(', 'float $x , float $y , float $width , float $height)', 'bool'),
  \ phpapi#method('setCMYKFill(', 'float $c , float $m , float $y , float $k)', 'bool'),
  \ phpapi#method('setCMYKStroke(', 'float $c , float $m , float $y , float $k)', 'bool'),
  \ phpapi#method('setCharSpace(', 'float $char_space)', 'bool'),
  \ phpapi#method('setDash(', 'array $pattern , int $phase)', 'bool'),
  \ phpapi#method('setFlatness(', 'float $flatness)', 'bool'),
  \ phpapi#method('setFontAndSize(', 'object $font , float $size)', 'bool'),
  \ phpapi#method('setGrayFill(', 'float $value)', 'bool'),
  \ phpapi#method('setGrayStroke(', 'float $value)', 'bool'),
  \ phpapi#method('setHeight(', 'float $height)', 'bool'),
  \ phpapi#method('setHorizontalScaling(', 'float $scaling)', 'bool'),
  \ phpapi#method('setLineCap(', 'int $cap)', 'bool'),
  \ phpapi#method('setLineJoin(', 'int $join)', 'bool'),
  \ phpapi#method('setLineWidth(', 'float $width)', 'bool'),
  \ phpapi#method('setMiterLimit(', 'float $limit)', 'bool'),
  \ phpapi#method('setRGBFill(', 'float $r , float $g , float $b)', 'bool'),
  \ phpapi#method('setRGBStroke(', 'float $r , float $g , float $b)', 'bool'),
  \ phpapi#method('setRotate(', 'int $angle)', 'bool'),
  \ phpapi#method('setSize(', 'int $size , int $direction)', 'bool'),
  \ phpapi#method('setSlideShow(', 'int $type , float $disp_time , float $trans_time)', 'bool'),
  \ phpapi#method('setTextLeading(', 'float $text_leading)', 'bool'),
  \ phpapi#method('setTextMatrix(', 'float $a , float $b , float $c , float $d , float $x , float $y)', 'bool'),
  \ phpapi#method('setTextRenderingMode(', 'int $mode)', 'bool'),
  \ phpapi#method('setTextRise(', 'float $rise)', 'bool'),
  \ phpapi#method('setWidth(', 'float $width)', 'bool'),
  \ phpapi#method('setWordSpace(', 'float $word_space)', 'bool'),
  \ phpapi#method('showText(', 'string $text)', 'bool'),
  \ phpapi#method('showTextNextLine(', 'string $text [, float $word_space = 0 [, float $char_space = 0 ]])', 'bool'),
  \ phpapi#method('stroke(', '[ bool $close_path = false ])', 'bool'),
  \ phpapi#method('textOut(', 'float $x , float $y , string $text)', 'bool'),
  \ phpapi#method('textRect(', 'float $left , float $top , float $right , float $bottom , string $text [, int $align =  HaruPage::TALIGN_LEFT ])', 'bool'),
  \ ])

call phpapi#class('HttpDeflateStream', '', [
  \ phpapi#method('factory(', '[ int $flags = 0 [, string $class_name = "HttpDeflateStream" ]])', 'public HttpDeflateStream'),
  \ phpapi#method('finish(', '[ string $data ])', 'public string'),
  \ phpapi#method('flush(', '[ string $data ])', 'public string'),
  \ phpapi#method('update(', 'string $data)', 'public string'),
  \ ])

call phpapi#class('HttpInflateStream', '', [
  \ phpapi#method('factory(', '[ int $flags = 0 [, string $class_name = "HttpInflateStream" ]])', 'public HttpInflateStream'),
  \ phpapi#method('finish(', '[ string $data ])', 'public string'),
  \ phpapi#method('flush(', '[ string $data ])', 'public string'),
  \ phpapi#method('update(', 'string $data)', 'public string'),
  \ ])

call phpapi#class('HttpMessage', '', [
  \ phpapi#method('addHeaders(', 'array $headers [, bool $append = false ])', 'public void'),
  \ phpapi#method('detach(', 'void)', 'public HttpMessage'),
  \ phpapi#method('factory(', '[ string $raw_message [, string $class_name = "HttpMessage" ]])', 'static public HttpMessage'),
  \ phpapi#method('fromEnv(', 'int $message_type [, string $class_name = "HttpMessage" ])', 'static public HttpMessage'),
  \ phpapi#method('fromString(', '[ string $raw_message [, string $class_name = "HttpMessage" ]])', 'static public HttpMessage'),
  \ phpapi#method('getBody(', 'void)', 'public string'),
  \ phpapi#method('getHeader(', 'string $header)', 'public string'),
  \ phpapi#method('getHeaders(', 'void)', 'public array'),
  \ phpapi#method('getHttpVersion(', 'void)', 'public string'),
  \ phpapi#method('getParentMessage(', 'void)', 'public HttpMessage'),
  \ phpapi#method('getRequestMethod(', 'void)', 'public string'),
  \ phpapi#method('getRequestUrl(', 'void)', 'public string'),
  \ phpapi#method('getResponseCode(', 'void)', 'public int'),
  \ phpapi#method('getResponseStatus(', 'void)', 'public string'),
  \ phpapi#method('getType(', 'void)', 'public int'),
  \ phpapi#method('guessContentType(', 'string $magic_file [, int $magic_mode = MAGIC_MIME ])', 'public string'),
  \ phpapi#method('prepend(', 'HttpMessage $message [, bool $top = true ])', 'public void'),
  \ phpapi#method('reverse(', 'void)', 'public HttpMessage'),
  \ phpapi#method('send(', 'void)', 'public bool'),
  \ phpapi#method('setBody(', 'string $body)', 'public void'),
  \ phpapi#method('setHeaders(', 'array $headers)', 'public void'),
  \ phpapi#method('setHttpVersion(', 'string $version)', 'public bool'),
  \ phpapi#method('setRequestMethod(', 'string $method)', 'public bool'),
  \ phpapi#method('setRequestUrl(', 'string $url)', 'public bool'),
  \ phpapi#method('setResponseCode(', 'int $code)', 'public bool'),
  \ phpapi#method('setResponseStatus(', 'string $status)', 'public bool'),
  \ phpapi#method('setType(', 'int $type)', 'public void'),
  \ phpapi#method('toMessageTypeObject(', 'void)', 'public HttpRequest|HttpResponse'),
  \ phpapi#method('toString(', '[ bool $include_parent = false ])', 'public string'),
  \ ])

call phpapi#class('HttpQueryString', '', [
  \ phpapi#method('get(', '[ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false ]]]])', 'public mixed'),
  \ phpapi#method('mod(', 'mixed $params)', 'public HttpQueryString'),
  \ phpapi#method('set(', 'mixed $params)', 'public string'),
  \ phpapi#method('singleton(', '[ bool $global = true ])', 'static public HttpQueryString'),
  \ phpapi#method('toArray(', 'void)', 'public array'),
  \ phpapi#method('toString(', 'void)', 'public string'),
  \ phpapi#method('xlate(', 'string $ie , string $oe)', 'public bool'),
  \ ])

call phpapi#class('HttpRequest', '', [
  \ phpapi#method('addCookies(', 'array $cookies)', 'public bool'),
  \ phpapi#method('addHeaders(', 'array $headers)', 'public bool'),
  \ phpapi#method('addPostFields(', 'array $post_data)', 'public bool'),
  \ phpapi#method('addPostFile(', 'string $name , string $file [, string $content_type = "application/x-octetstream" ])', 'public bool'),
  \ phpapi#method('addPutData(', 'string $put_data)', 'public bool'),
  \ phpapi#method('addQueryData(', 'array $query_params)', 'public bool'),
  \ phpapi#method('addRawPostData(', 'string $raw_post_data)', 'public bool'),
  \ phpapi#method('addSslOptions(', 'array $options)', 'public bool'),
  \ phpapi#method('clearHistory(', 'void)', 'public void'),
  \ phpapi#method('enableCookies(', 'void)', 'public bool'),
  \ phpapi#method('getContentType(', 'void)', 'public string'),
  \ phpapi#method('getCookies(', 'void)', 'public array'),
  \ phpapi#method('getHeaders(', 'void)', 'public array'),
  \ phpapi#method('getHistory(', 'void)', 'public HttpMessage'),
  \ phpapi#method('getMethod(', 'void)', 'public int'),
  \ phpapi#method('getOptions(', 'void)', 'public array'),
  \ phpapi#method('getPostFields(', 'void)', 'public array'),
  \ phpapi#method('getPostFiles(', 'void)', 'public array'),
  \ phpapi#method('getPutData(', 'void)', 'public string'),
  \ phpapi#method('getPutFile(', 'void)', 'public string'),
  \ phpapi#method('getQueryData(', 'void)', 'public string'),
  \ phpapi#method('getRawPostData(', 'void)', 'public string'),
  \ phpapi#method('getRawRequestMessage(', 'void)', 'public string'),
  \ phpapi#method('getRawResponseMessage(', 'void)', 'public string'),
  \ phpapi#method('getRequestMessage(', 'void)', 'public HttpMessage'),
  \ phpapi#method('getResponseBody(', 'void)', 'public string'),
  \ phpapi#method('getResponseCode(', 'void)', 'public int'),
  \ phpapi#method('getResponseCookies(', '[ int $flags = 0 [, array $allowed_extras ]])', 'public array'),
  \ phpapi#method('getResponseData(', 'void)', 'public array'),
  \ phpapi#method('getResponseHeader(', '[ string $name ])', 'public mixed'),
  \ phpapi#method('getResponseInfo(', '[ string $name ])', 'public mixed'),
  \ phpapi#method('getResponseMessage(', 'void)', 'public HttpMessage'),
  \ phpapi#method('getResponseStatus(', 'void)', 'public string'),
  \ phpapi#method('getSslOptions(', 'void)', 'public array'),
  \ phpapi#method('getUrl(', 'void)', 'public string'),
  \ phpapi#method('resetCookies(', '[ bool $session_only = false ])', 'public bool'),
  \ phpapi#method('send(', 'void)', 'public HttpMessage'),
  \ phpapi#method('setContentType(', 'string $content_type)', 'public bool'),
  \ phpapi#method('setCookies(', '[ array $cookies ])', 'public bool'),
  \ phpapi#method('setHeaders(', '[ array $headers ])', 'public bool'),
  \ phpapi#method('setMethod(', 'int $request_method)', 'public bool'),
  \ phpapi#method('setOptions(', '[ array $options ])', 'public bool'),
  \ phpapi#method('setPostFields(', 'array $post_data)', 'public bool'),
  \ phpapi#method('setPostFiles(', 'array $post_files)', 'public bool'),
  \ phpapi#method('setPutData(', '[ string $put_data ])', 'public bool'),
  \ phpapi#method('setPutFile(', '[ string $file = "" ])', 'public bool'),
  \ phpapi#method('setQueryData(', 'mixed $query_data)', 'public bool'),
  \ phpapi#method('setRawPostData(', '[ string $raw_post_data ])', 'public bool'),
  \ phpapi#method('setSslOptions(', '[ array $options ])', 'public bool'),
  \ phpapi#method('setUrl(', 'string $url)', 'public bool'),
  \ ])

call phpapi#class('HttpRequestPool', '', [
  \ phpapi#method('attach(', 'HttpRequest $request)', 'public bool'),
  \ phpapi#method('detach(', 'HttpRequest $request)', 'bool'),
  \ phpapi#method('getAttachedRequests(', 'void)', 'array'),
  \ phpapi#method('getFinishedRequests(', 'void)', 'array'),
  \ phpapi#method('reset(', 'void)', 'void'),
  \ phpapi#method('send(', 'void)', 'bool'),
  \ phpapi#method('socketPerform(', 'void)', 'protected bool'),
  \ phpapi#method('socketSelect(', '[ float $timeout = 0 ])', 'protected bool'),
  \ ])

call phpapi#class('HttpResponse', '', [
  \ phpapi#method('capture(', 'void)', 'static void'),
  \ phpapi#method('getBufferSize(', 'void)', 'static int'),
  \ phpapi#method('getCache(', 'void)', 'static bool'),
  \ phpapi#method('getCacheControl(', 'void)', 'static string'),
  \ phpapi#method('getContentDisposition(', 'void)', 'static string'),
  \ phpapi#method('getContentType(', 'void)', 'static string'),
  \ phpapi#method('getData(', 'void)', 'static string'),
  \ phpapi#method('getETag(', 'void)', 'static string'),
  \ phpapi#method('getFile(', 'void)', 'static string'),
  \ phpapi#method('getGzip(', 'void)', 'static bool'),
  \ phpapi#method('getHeader(', '[ string $name ])', 'static mixed'),
  \ phpapi#method('getLastModified(', 'void)', 'static int'),
  \ phpapi#method('getRequestBody(', 'void)', 'static string'),
  \ phpapi#method('getRequestBodyStream(', 'void)', 'static resource'),
  \ phpapi#method('getRequestHeaders(', 'void)', 'static array'),
  \ phpapi#method('getStream(', 'void)', 'static resource'),
  \ phpapi#method('getThrottleDelay(', 'void)', 'static double'),
  \ phpapi#method('guessContentType(', 'string $magic_file [, int $magic_mode = MAGIC_MIME ])', 'static string'),
  \ phpapi#method('redirect(', '[ string $url [, array $params [, bool $session = false [, int $status ]]]])', 'static void'),
  \ phpapi#method('send(', '[ bool $clean_ob = true ])', 'static bool'),
  \ phpapi#method('setBufferSize(', 'int $bytes)', 'static bool'),
  \ phpapi#method('setCache(', 'bool $cache)', 'static bool'),
  \ phpapi#method('setCacheControl(', 'string $control [, int $max_age = 0 [, bool $must_revalidate = true ]])', 'static bool'),
  \ phpapi#method('setContentDisposition(', 'string $filename [, bool $inline = false ])', 'static bool'),
  \ phpapi#method('setContentType(', 'string $content_type)', 'static bool'),
  \ phpapi#method('setData(', 'mixed $data)', 'static bool'),
  \ phpapi#method('setETag(', 'string $etag)', 'static bool'),
  \ phpapi#method('setFile(', 'string $file)', 'static bool'),
  \ phpapi#method('setGzip(', 'bool $gzip)', 'static bool'),
  \ phpapi#method('setHeader(', 'string $name [, mixed $value [, bool $replace = true ]])', 'static bool'),
  \ phpapi#method('setLastModified(', 'int $timestamp)', 'static bool'),
  \ phpapi#method('setStream(', 'resource $stream)', 'static bool'),
  \ phpapi#method('setThrottleDelay(', 'float $seconds)', 'static bool'),
  \ phpapi#method('status(', 'int $status)', 'static bool'),
  \ ])

call phpapi#class('Imagick', '', [
  \ phpapi#method('adaptiveBlurImage(', 'float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('adaptiveResizeImage(', 'int $columns , int $rows [, bool $bestfit = false ])', 'bool'),
  \ phpapi#method('adaptiveSharpenImage(', 'float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('adaptiveThresholdImage(', 'int $width , int $height , int $offset)', 'bool'),
  \ phpapi#method('addImage(', 'Imagick $source)', 'bool'),
  \ phpapi#method('addNoiseImage(', 'int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('affineTransformImage(', 'ImagickDraw $matrix)', 'bool'),
  \ phpapi#method('animateImages(', 'string $x_server)', 'bool'),
  \ phpapi#method('annotateImage(', 'ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text)', 'bool'),
  \ phpapi#method('appendImages(', 'bool $stack = false)', 'Imagick'),
  \ phpapi#method('averageImages(', 'void)', 'Imagick'),
  \ phpapi#method('blackThresholdImage(', 'mixed $threshold)', 'bool'),
  \ phpapi#method('blurImage(', 'float $radius , float $sigma [, int $channel ])', 'bool'),
  \ phpapi#method('borderImage(', 'mixed $bordercolor , int $width , int $height)', 'bool'),
  \ phpapi#method('charcoalImage(', 'float $radius , float $sigma)', 'bool'),
  \ phpapi#method('chopImage(', 'int $width , int $height , int $x , int $y)', 'bool'),
  \ phpapi#method('clear(', 'void)', 'bool'),
  \ phpapi#method('clipImage(', 'void)', 'bool'),
  \ phpapi#method('clipPathImage(', 'string $pathname , bool $inside)', 'bool'),
  \ phpapi#method('clone(', 'void)', 'Imagick'),
  \ phpapi#method('clutImage(', 'Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('coalesceImages(', 'void)', 'Imagick'),
  \ phpapi#method('colorFloodfillImage(', 'mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y)', 'bool'),
  \ phpapi#method('colorizeImage(', 'mixed $colorize , mixed $opacity)', 'bool'),
  \ phpapi#method('combineImages(', 'int $channelType)', 'Imagick'),
  \ phpapi#method('commentImage(', 'string $comment)', 'bool'),
  \ phpapi#method('compareImageChannels(', 'Imagick $image , int $channelType , int $metricType)', 'array'),
  \ phpapi#method('compareImageLayers(', 'int $method)', 'Imagick'),
  \ phpapi#method('compareImages(', 'Imagick $compare , int $metric)', 'array'),
  \ phpapi#method('compositeImage(', 'Imagick $composite_object , int $composite , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ])', 'bool'),
  \ phpapi#method('contrastImage(', 'bool $sharpen)', 'bool'),
  \ phpapi#method('contrastStretchImage(', 'float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_ALL ])', 'bool'),
  \ phpapi#method('convolveImage(', 'array $kernel [, int $channel = Imagick::CHANNEL_ALL ])', 'bool'),
  \ phpapi#method('cropImage(', 'int $width , int $height , int $x , int $y)', 'bool'),
  \ phpapi#method('cropThumbnailImage(', 'int $width , int $height)', 'bool'),
  \ phpapi#method('current(', 'void)', 'Imagick'),
  \ phpapi#method('cycleColormapImage(', 'int $displace)', 'bool'),
  \ phpapi#method('decipherImage(', 'string $passphrase)', 'bool'),
  \ phpapi#method('deconstructImages(', 'void)', 'Imagick'),
  \ phpapi#method('deleteImageArtifact(', 'string $artifact)', 'bool'),
  \ phpapi#method('despeckleImage(', 'void)', 'bool'),
  \ phpapi#method('destroy(', 'void)', 'bool'),
  \ phpapi#method('displayImage(', 'string $servername)', 'bool'),
  \ phpapi#method('displayImages(', 'string $servername)', 'bool'),
  \ phpapi#method('distortImage(', 'int $method , array $arguments , bool $bestfit)', 'bool'),
  \ phpapi#method('drawImage(', 'ImagickDraw $draw)', 'bool'),
  \ phpapi#method('edgeImage(', 'float $radius)', 'bool'),
  \ phpapi#method('embossImage(', 'float $radius , float $sigma)', 'bool'),
  \ phpapi#method('encipherImage(', 'string $passphrase)', 'bool'),
  \ phpapi#method('enhanceImage(', 'void)', 'bool'),
  \ phpapi#method('equalizeImage(', 'void)', 'bool'),
  \ phpapi#method('evaluateImage(', 'int $op , float $constant [, int $channel = Imagick::CHANNEL_ALL ])', 'bool'),
  \ phpapi#method('extentImage(', 'int $width , int $height , int $x , int $y)', 'bool'),
  \ phpapi#method('flattenImages(', 'void)', 'Imagick'),
  \ phpapi#method('flipImage(', 'void)', 'bool'),
  \ phpapi#method('floodFillPaintImage(', 'mixed $fill , float $fuzz , mixed $target , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('flopImage(', 'void)', 'bool'),
  \ phpapi#method('frameImage(', 'mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel)', 'bool'),
  \ phpapi#method('fxImage(', 'string $expression [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('gammaImage(', 'float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('gaussianBlurImage(', 'float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('getColorspace(', 'void)', 'int'),
  \ phpapi#method('getCompression(', 'void)', 'int'),
  \ phpapi#method('getCompressionQuality(', 'void)', 'int'),
  \ phpapi#method('getCopyright(', 'void)', 'string'),
  \ phpapi#method('getFilename(', 'void)', 'string'),
  \ phpapi#method('getFont(', 'void)', 'string'),
  \ phpapi#method('getFormat(', 'void)', 'string'),
  \ phpapi#method('getGravity(', 'void)', 'int'),
  \ phpapi#method('getHomeURL(', 'void)', 'string'),
  \ phpapi#method('getImage(', 'void)', 'Imagick'),
  \ phpapi#method('getImageAlphaChannel(', 'void)', 'int'),
  \ phpapi#method('getImageArtifact(', 'string $artifact)', 'string'),
  \ phpapi#method('getImageBackgroundColor(', 'void)', 'ImagickPixel'),
  \ phpapi#method('getImageBlob(', 'void)', 'string'),
  \ phpapi#method('getImageBluePrimary(', 'void)', 'array'),
  \ phpapi#method('getImageBorderColor(', 'void)', 'ImagickPixel'),
  \ phpapi#method('getImageChannelDepth(', 'int $channel)', 'int'),
  \ phpapi#method('getImageChannelDistortion(', 'Imagick $reference , int $channel , int $metric)', 'float'),
  \ phpapi#method('getImageChannelDistortions(', 'Imagick $reference , int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('getImageChannelExtrema(', 'int $channel)', 'array'),
  \ phpapi#method('getImageChannelMean(', 'int $channel)', 'array'),
  \ phpapi#method('getImageChannelRange(', 'int $channel)', 'array'),
  \ phpapi#method('getImageChannelStatistics(', 'void)', 'array'),
  \ phpapi#method('getImageClipMask(', 'void)', 'Imagick'),
  \ phpapi#method('getImageColormapColor(', 'int $index)', 'ImagickPixel'),
  \ phpapi#method('getImageColors(', 'void)', 'int'),
  \ phpapi#method('getImageColorspace(', 'void)', 'int'),
  \ phpapi#method('getImageCompose(', 'void)', 'int'),
  \ phpapi#method('getImageCompression(', 'void)', 'int'),
  \ phpapi#method('getImageDelay(', 'void)', 'int'),
  \ phpapi#method('getImageDepth(', 'void)', 'int'),
  \ phpapi#method('getImageDispose(', 'void)', 'int'),
  \ phpapi#method('getImageDistortion(', 'MagickWand $reference , int $metric)', 'float'),
  \ phpapi#method('getImageExtrema(', 'void)', 'array'),
  \ phpapi#method('getImageFilename(', 'void)', 'string'),
  \ phpapi#method('getImageFormat(', 'void)', 'string'),
  \ phpapi#method('getImageGamma(', 'void)', 'float'),
  \ phpapi#method('getImageGeometry(', 'void)', 'array'),
  \ phpapi#method('getImageGravity(', 'void)', 'int'),
  \ phpapi#method('getImageGreenPrimary(', 'void)', 'array'),
  \ phpapi#method('getImageHeight(', 'void)', 'int'),
  \ phpapi#method('getImageHistogram(', 'void)', 'array'),
  \ phpapi#method('getImageIndex(', 'void)', 'int'),
  \ phpapi#method('getImageInterlaceScheme(', 'void)', 'int'),
  \ phpapi#method('getImageInterpolateMethod(', 'void)', 'int'),
  \ phpapi#method('getImageIterations(', 'void)', 'int'),
  \ phpapi#method('getImageLength(', 'void)', 'int'),
  \ phpapi#method('getImageMagickLicense(', 'void)', 'string'),
  \ phpapi#method('getImageMatte(', 'void)', 'bool'),
  \ phpapi#method('getImageMatteColor(', 'void)', 'ImagickPixel'),
  \ phpapi#method('getImageOrientation(', 'void)', 'int'),
  \ phpapi#method('getImagePage(', 'void)', 'array'),
  \ phpapi#method('getImagePixelColor(', 'int $x , int $y)', 'ImagickPixel'),
  \ phpapi#method('getImageProfile(', 'string $name)', 'string'),
  \ phpapi#method('getImageProfiles(', '[ string $pattern = "*" [, bool $only_names = true ]])', 'array'),
  \ phpapi#method('getImageProperties(', '[ string $pattern = "*" [, bool $only_names = true ]])', 'array'),
  \ phpapi#method('getImageProperty(', 'string $name)', 'string'),
  \ phpapi#method('getImageRedPrimary(', 'void)', 'array'),
  \ phpapi#method('getImageRegion(', 'int $width , int $height , int $x , int $y)', 'Imagick'),
  \ phpapi#method('getImageRenderingIntent(', 'void)', 'int'),
  \ phpapi#method('getImageResolution(', 'void)', 'array'),
  \ phpapi#method('getImageScene(', 'void)', 'int'),
  \ phpapi#method('getImageSignature(', 'void)', 'string'),
  \ phpapi#method('getImageSize(', 'void)', 'int'),
  \ phpapi#method('getImageTicksPerSecond(', 'void)', 'int'),
  \ phpapi#method('getImageTotalInkDensity(', 'void)', 'float'),
  \ phpapi#method('getImageType(', 'void)', 'int'),
  \ phpapi#method('getImageUnits(', 'void)', 'int'),
  \ phpapi#method('getImageVirtualPixelMethod(', 'void)', 'int'),
  \ phpapi#method('getImageWhitePoint(', 'void)', 'array'),
  \ phpapi#method('getImageWidth(', 'void)', 'int'),
  \ phpapi#method('getImagesBlob(', 'void)', 'string'),
  \ phpapi#method('getInterlaceScheme(', 'void)', 'int'),
  \ phpapi#method('getIteratorIndex(', 'void)', 'int'),
  \ phpapi#method('getNumberImages(', 'void)', 'int'),
  \ phpapi#method('getOption(', 'string $key)', 'string'),
  \ phpapi#method('getPackageName(', 'void)', 'string'),
  \ phpapi#method('getPage(', 'void)', 'array'),
  \ phpapi#method('getPixelIterator(', 'void)', 'ImagickPixelIterator'),
  \ phpapi#method('getPixelRegionIterator(', 'int $x , int $y , int $columns , int $rows)', 'ImagickPixelIterator'),
  \ phpapi#method('getPointSize(', 'void)', 'float'),
  \ phpapi#method('getQuantumDepth(', 'void)', 'array'),
  \ phpapi#method('getQuantumRange(', 'void)', 'array'),
  \ phpapi#method('getReleaseDate(', 'void)', 'string'),
  \ phpapi#method('getResource(', 'int $type)', 'int'),
  \ phpapi#method('getResourceLimit(', 'int $type)', 'int'),
  \ phpapi#method('getSamplingFactors(', 'void)', 'array'),
  \ phpapi#method('getSize(', 'void)', 'array'),
  \ phpapi#method('getSizeOffset(', 'void)', 'int'),
  \ phpapi#method('getVersion(', 'void)', 'array'),
  \ phpapi#method('hasNextImage(', 'void)', 'bool'),
  \ phpapi#method('hasPreviousImage(', 'void)', 'bool'),
  \ phpapi#method('identifyImage(', '[ bool $appendRawOutput = false ])', 'array'),
  \ phpapi#method('implodeImage(', 'float $radius)', 'bool'),
  \ phpapi#method('labelImage(', 'string $label)', 'bool'),
  \ phpapi#method('levelImage(', 'float $blackPoint , float $gamma , float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('linearStretchImage(', 'float $blackPoint , float $whitePoint)', 'bool'),
  \ phpapi#method('liquidRescaleImage(', 'int $width , int $height , float $delta_x , float $rigidity)', 'bool'),
  \ phpapi#method('magnifyImage(', 'void)', 'bool'),
  \ phpapi#method('mapImage(', 'Imagick $map , bool $dither)', 'bool'),
  \ phpapi#method('matteFloodfillImage(', 'float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y)', 'bool'),
  \ phpapi#method('medianFilterImage(', 'float $radius)', 'bool'),
  \ phpapi#method('mergeImageLayers(', 'int $layer_method)', 'bool'),
  \ phpapi#method('minifyImage(', 'void)', 'bool'),
  \ phpapi#method('modulateImage(', 'float $brightness , float $saturation , float $hue)', 'bool'),
  \ phpapi#method('montageImage(', 'ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame)', 'Imagick'),
  \ phpapi#method('morphImages(', 'int $number_frames)', 'Imagick'),
  \ phpapi#method('mosaicImages(', 'void)', 'Imagick'),
  \ phpapi#method('motionBlurImage(', 'float $radius , float $sigma , float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('negateImage(', 'bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('newImage(', 'int $cols , int $rows , mixed $background [, string $format ])', 'bool'),
  \ phpapi#method('newPseudoImage(', 'int $columns , int $rows , string $pseudoString)', 'bool'),
  \ phpapi#method('nextImage(', 'void)', 'bool'),
  \ phpapi#method('normalizeImage(', '[ int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('oilPaintImage(', 'float $radius)', 'bool'),
  \ phpapi#method('opaquePaintImage(', 'mixed $target , mixed $fill , float $fuzz , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('optimizeImageLayers(', 'void)', 'bool'),
  \ phpapi#method('orderedPosterizeImage(', 'string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('paintFloodfillImage(', 'mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('paintOpaqueImage(', 'mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('paintTransparentImage(', 'mixed $target , float $alpha , float $fuzz)', 'bool'),
  \ phpapi#method('pingImage(', 'string $filename)', 'bool'),
  \ phpapi#method('pingImageBlob(', 'string $image)', 'bool'),
  \ phpapi#method('pingImageFile(', 'resource $filehandle [, string $fileName ])', 'bool'),
  \ phpapi#method('polaroidImage(', 'ImagickDraw $properties , float $angle)', 'bool'),
  \ phpapi#method('posterizeImage(', 'int $levels , bool $dither)', 'bool'),
  \ phpapi#method('previewImages(', 'int $preview)', 'bool'),
  \ phpapi#method('previousImage(', 'void)', 'bool'),
  \ phpapi#method('profileImage(', 'string $name , string $profile)', 'bool'),
  \ phpapi#method('quantizeImage(', 'int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError)', 'bool'),
  \ phpapi#method('quantizeImages(', 'int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError)', 'bool'),
  \ phpapi#method('queryFontMetrics(', 'ImagickDraw $properties , string $text [, bool $multiline ])', 'array'),
  \ phpapi#method('queryFonts(', '[ string $pattern = "*" ])', 'array'),
  \ phpapi#method('queryFormats(', '[ string $pattern = "*" ])', 'array'),
  \ phpapi#method('radialBlurImage(', 'float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('raiseImage(', 'int $width , int $height , int $x , int $y , bool $raise)', 'bool'),
  \ phpapi#method('randomThresholdImage(', 'float $low , float $high [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('readImage(', 'string $filename)', 'bool'),
  \ phpapi#method('readImageBlob(', 'string $image [, string $filename ])', 'bool'),
  \ phpapi#method('readImageFile(', 'resource $filehandle [, string $fileName = null ])', 'bool'),
  \ phpapi#method('recolorImage(', 'array $matrix)', 'bool'),
  \ phpapi#method('reduceNoiseImage(', 'float $radius)', 'bool'),
  \ phpapi#method('removeImage(', 'void)', 'bool'),
  \ phpapi#method('removeImageProfile(', 'string $name)', 'string'),
  \ phpapi#method('render(', 'void)', 'bool'),
  \ phpapi#method('resampleImage(', 'float $x_resolution , float $y_resolution , int $filter , float $blur)', 'bool'),
  \ phpapi#method('resetImagePage(', 'string $page)', 'bool'),
  \ phpapi#method('resizeImage(', 'int $columns , int $rows , int $filter , float $blur [, bool $bestfit = false ])', 'bool'),
  \ phpapi#method('rollImage(', 'int $x , int $y)', 'bool'),
  \ phpapi#method('rotateImage(', 'mixed $background , float $degrees)', 'bool'),
  \ phpapi#method('roundCorners(', 'float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]])', 'bool'),
  \ phpapi#method('sampleImage(', 'int $columns , int $rows)', 'bool'),
  \ phpapi#method('scaleImage(', 'int $cols , int $rows [, bool $bestfit = false ])', 'bool'),
  \ phpapi#method('separateImageChannel(', 'int $channel)', 'bool'),
  \ phpapi#method('sepiaToneImage(', 'float $threshold)', 'bool'),
  \ phpapi#method('setBackgroundColor(', 'mixed $background)', 'bool'),
  \ phpapi#method('setColorspace(', 'int $COLORSPACE)', 'bool'),
  \ phpapi#method('setCompression(', 'int $compression)', 'bool'),
  \ phpapi#method('setCompressionQuality(', 'int $quality)', 'bool'),
  \ phpapi#method('setFilename(', 'string $filename)', 'bool'),
  \ phpapi#method('setFirstIterator(', 'void)', 'bool'),
  \ phpapi#method('setFont(', 'string $font)', 'bool'),
  \ phpapi#method('setFormat(', 'string $format)', 'bool'),
  \ phpapi#method('setGravity(', 'int $gravity)', 'bool'),
  \ phpapi#method('setImage(', 'Imagick $replace)', 'bool'),
  \ phpapi#method('setImageAlphaChannel(', 'int $mode)', 'bool'),
  \ phpapi#method('setImageArtifact(', 'string $artifact , string $value)', 'bool'),
  \ phpapi#method('setImageBackgroundColor(', 'mixed $background)', 'bool'),
  \ phpapi#method('setImageBias(', 'float $bias)', 'bool'),
  \ phpapi#method('setImageBluePrimary(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('setImageBorderColor(', 'mixed $border)', 'bool'),
  \ phpapi#method('setImageChannelDepth(', 'int $channel , int $depth)', 'bool'),
  \ phpapi#method('setImageClipMask(', 'Imagick $clip_mask)', 'bool'),
  \ phpapi#method('setImageColormapColor(', 'int $index , ImagickPixel $color)', 'bool'),
  \ phpapi#method('setImageColorspace(', 'int $colorspace)', 'bool'),
  \ phpapi#method('setImageCompose(', 'int $compose)', 'bool'),
  \ phpapi#method('setImageCompression(', 'int $compression)', 'bool'),
  \ phpapi#method('setImageCompressionQuality(', 'int $quality)', 'bool'),
  \ phpapi#method('setImageDelay(', 'int $delay)', 'bool'),
  \ phpapi#method('setImageDepth(', 'int $depth)', 'bool'),
  \ phpapi#method('setImageDispose(', 'int $dispose)', 'bool'),
  \ phpapi#method('setImageExtent(', 'int $columns , int $rows)', 'bool'),
  \ phpapi#method('setImageFilename(', 'string $filename)', 'bool'),
  \ phpapi#method('setImageFormat(', 'string $format)', 'bool'),
  \ phpapi#method('setImageGamma(', 'float $gamma)', 'bool'),
  \ phpapi#method('setImageGravity(', 'int $gravity)', 'bool'),
  \ phpapi#method('setImageGreenPrimary(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('setImageIndex(', 'int $index)', 'bool'),
  \ phpapi#method('setImageInterlaceScheme(', 'int $interlace_scheme)', 'bool'),
  \ phpapi#method('setImageInterpolateMethod(', 'int $method)', 'bool'),
  \ phpapi#method('setImageIterations(', 'int $iterations)', 'bool'),
  \ phpapi#method('setImageMatte(', 'bool $matte)', 'bool'),
  \ phpapi#method('setImageMatteColor(', 'mixed $matte)', 'bool'),
  \ phpapi#method('setImageOpacity(', 'float $opacity)', 'bool'),
  \ phpapi#method('setImageOrientation(', 'int $orientation)', 'bool'),
  \ phpapi#method('setImagePage(', 'int $width , int $height , int $x , int $y)', 'bool'),
  \ phpapi#method('setImageProfile(', 'string $name , string $profile)', 'bool'),
  \ phpapi#method('setImageProperty(', 'string $name , string $value)', 'bool'),
  \ phpapi#method('setImageRedPrimary(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('setImageRenderingIntent(', 'int $rendering_intent)', 'bool'),
  \ phpapi#method('setImageResolution(', 'float $x_resolution , float $y_resolution)', 'bool'),
  \ phpapi#method('setImageScene(', 'int $scene)', 'bool'),
  \ phpapi#method('setImageTicksPerSecond(', 'int $ticks_per-second)', 'bool'),
  \ phpapi#method('setImageType(', 'int $image_type)', 'bool'),
  \ phpapi#method('setImageUnits(', 'int $units)', 'bool'),
  \ phpapi#method('setImageVirtualPixelMethod(', 'int $method)', 'bool'),
  \ phpapi#method('setImageWhitePoint(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('setInterlaceScheme(', 'int $interlace_scheme)', 'bool'),
  \ phpapi#method('setIteratorIndex(', 'int $index)', 'bool'),
  \ phpapi#method('setLastIterator(', 'void)', 'bool'),
  \ phpapi#method('setOption(', 'string $key , string $value)', 'bool'),
  \ phpapi#method('setPage(', 'int $width , int $height , int $x , int $y)', 'bool'),
  \ phpapi#method('setPointSize(', 'float $point_size)', 'bool'),
  \ phpapi#method('setResolution(', 'float $x_resolution , float $y_resolution)', 'bool'),
  \ phpapi#method('setResourceLimit(', 'int $type , int $limit)', 'bool'),
  \ phpapi#method('setSamplingFactors(', 'array $factors)', 'bool'),
  \ phpapi#method('setSize(', 'int $columns , int $rows)', 'bool'),
  \ phpapi#method('setSizeOffset(', 'int $columns , int $rows , int $offset)', 'bool'),
  \ phpapi#method('setType(', 'int $image_type)', 'bool'),
  \ phpapi#method('shadeImage(', 'bool $gray , float $azimuth , float $elevation)', 'bool'),
  \ phpapi#method('shadowImage(', 'float $opacity , float $sigma , int $x , int $y)', 'bool'),
  \ phpapi#method('sharpenImage(', 'float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('shaveImage(', 'int $columns , int $rows)', 'bool'),
  \ phpapi#method('shearImage(', 'mixed $background , float $x_shear , float $y_shear)', 'bool'),
  \ phpapi#method('sigmoidalContrastImage(', 'bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('sketchImage(', 'float $radius , float $sigma , float $angle)', 'bool'),
  \ phpapi#method('solarizeImage(', 'int $threshold)', 'bool'),
  \ phpapi#method('spliceImage(', 'int $width , int $height , int $x , int $y)', 'bool'),
  \ phpapi#method('spreadImage(', 'float $radius)', 'bool'),
  \ phpapi#method('steganoImage(', 'Imagick $watermark_wand , int $offset)', 'Imagick'),
  \ phpapi#method('stereoImage(', 'Imagick $offset_wand)', 'bool'),
  \ phpapi#method('stripImage(', 'void)', 'bool'),
  \ phpapi#method('swirlImage(', 'float $degrees)', 'bool'),
  \ phpapi#method('textureImage(', 'Imagick $texture_wand)', 'bool'),
  \ phpapi#method('thresholdImage(', 'float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('thumbnailImage(', 'int $columns , int $rows [, bool $bestfit = false [, bool $fill = false ]])', 'bool'),
  \ phpapi#method('tintImage(', 'mixed $tint , mixed $opacity)', 'bool'),
  \ phpapi#method('transformImage(', 'string $crop , string $geometry)', 'Imagick'),
  \ phpapi#method('transparentPaintImage(', 'mixed $target , float $alpha , float $fuzz , bool $invert)', 'bool'),
  \ phpapi#method('transposeImage(', 'void)', 'bool'),
  \ phpapi#method('transverseImage(', 'void)', 'bool'),
  \ phpapi#method('trimImage(', 'float $fuzz)', 'bool'),
  \ phpapi#method('uniqueImageColors(', 'void)', 'bool'),
  \ phpapi#method('unsharpMaskImage(', 'float $radius , float $sigma , float $amount , float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ])', 'bool'),
  \ phpapi#method('valid(', 'void)', 'bool'),
  \ phpapi#method('vignetteImage(', 'float $blackPoint , float $whitePoint , int $x , int $y)', 'bool'),
  \ phpapi#method('waveImage(', 'float $amplitude , float $length)', 'bool'),
  \ phpapi#method('whiteThresholdImage(', 'mixed $threshold)', 'bool'),
  \ phpapi#method('writeImage(', '[ string $filename ])', 'bool'),
  \ phpapi#method('writeImageFile(', 'resource $filehandle)', 'bool'),
  \ phpapi#method('writeImages(', 'string $filename , bool $adjoin)', 'bool'),
  \ phpapi#method('writeImagesFile(', 'resource $filehandle)', 'bool'),
  \ ])

call phpapi#class('ImagickDraw', '', [
  \ phpapi#method('affine(', 'array $affine)', 'bool'),
  \ phpapi#method('annotation(', 'float $x , float $y , string $text)', 'bool'),
  \ phpapi#method('arc(', 'float $sx , float $sy , float $ex , float $ey , float $sd , float $ed)', 'bool'),
  \ phpapi#method('bezier(', 'array $coordinates)', 'bool'),
  \ phpapi#method('circle(', 'float $ox , float $oy , float $px , float $py)', 'bool'),
  \ phpapi#method('clear(', 'void)', 'bool'),
  \ phpapi#method('clone(', 'void)', 'ImagickDraw'),
  \ phpapi#method('color(', 'float $x , float $y , int $paintMethod)', 'bool'),
  \ phpapi#method('comment(', 'string $comment)', 'bool'),
  \ phpapi#method('composite(', 'int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand)', 'bool'),
  \ phpapi#method('destroy(', 'void)', 'bool'),
  \ phpapi#method('ellipse(', 'float $ox , float $oy , float $rx , float $ry , float $start , float $end)', 'bool'),
  \ phpapi#method('getClipPath(', 'void)', 'string'),
  \ phpapi#method('getClipRule(', 'void)', 'int'),
  \ phpapi#method('getClipUnits(', 'void)', 'int'),
  \ phpapi#method('getFillColor(', 'void)', 'ImagickPixel'),
  \ phpapi#method('getFillOpacity(', 'void)', 'float'),
  \ phpapi#method('getFillRule(', 'void)', 'int'),
  \ phpapi#method('getFont(', 'void)', 'string'),
  \ phpapi#method('getFontFamily(', 'void)', 'string'),
  \ phpapi#method('getFontSize(', 'void)', 'float'),
  \ phpapi#method('getFontStyle(', 'void)', 'int'),
  \ phpapi#method('getFontWeight(', 'void)', 'int'),
  \ phpapi#method('getGravity(', 'void)', 'int'),
  \ phpapi#method('getStrokeAntialias(', 'void)', 'bool'),
  \ phpapi#method('getStrokeColor(', 'void)', 'ImagickPixel'),
  \ phpapi#method('getStrokeDashArray(', 'void)', 'array'),
  \ phpapi#method('getStrokeDashOffset(', 'void)', 'float'),
  \ phpapi#method('getStrokeLineCap(', 'void)', 'int'),
  \ phpapi#method('getStrokeLineJoin(', 'void)', 'int'),
  \ phpapi#method('getStrokeMiterLimit(', 'void)', 'int'),
  \ phpapi#method('getStrokeOpacity(', 'void)', 'float'),
  \ phpapi#method('getStrokeWidth(', 'void)', 'float'),
  \ phpapi#method('getTextAlignment(', 'void)', 'int'),
  \ phpapi#method('getTextAntialias(', 'void)', 'bool'),
  \ phpapi#method('getTextDecoration(', 'void)', 'int'),
  \ phpapi#method('getTextEncoding(', 'void)', 'string'),
  \ phpapi#method('getTextUnderColor(', 'void)', 'ImagickPixel'),
  \ phpapi#method('getVectorGraphics(', 'void)', 'string'),
  \ phpapi#method('line(', 'float $sx , float $sy , float $ex , float $ey)', 'bool'),
  \ phpapi#method('matte(', 'float $x , float $y , int $paintMethod)', 'bool'),
  \ phpapi#method('pathClose(', 'void)', 'bool'),
  \ phpapi#method('pathCurveToAbsolute(', 'float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToQuadraticBezierAbsolute(', 'float $x1 , float $y1 , float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToQuadraticBezierRelative(', 'float $x1 , float $y1 , float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToQuadraticBezierSmoothAbsolute(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToQuadraticBezierSmoothRelative(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToRelative(', 'float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToSmoothAbsolute(', 'float $x2 , float $y2 , float $x , float $y)', 'bool'),
  \ phpapi#method('pathCurveToSmoothRelative(', 'float $x2 , float $y2 , float $x , float $y)', 'bool'),
  \ phpapi#method('pathEllipticArcAbsolute(', 'float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y)', 'bool'),
  \ phpapi#method('pathEllipticArcRelative(', 'float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y)', 'bool'),
  \ phpapi#method('pathFinish(', 'void)', 'bool'),
  \ phpapi#method('pathLineToAbsolute(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('pathLineToHorizontalAbsolute(', 'float $x)', 'bool'),
  \ phpapi#method('pathLineToHorizontalRelative(', 'float $x)', 'bool'),
  \ phpapi#method('pathLineToRelative(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('pathLineToVerticalAbsolute(', 'float $y)', 'bool'),
  \ phpapi#method('pathLineToVerticalRelative(', 'float $y)', 'bool'),
  \ phpapi#method('pathMoveToAbsolute(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('pathMoveToRelative(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('pathStart(', 'void)', 'bool'),
  \ phpapi#method('point(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('polygon(', 'array $coordinates)', 'bool'),
  \ phpapi#method('polyline(', 'array $coordinates)', 'bool'),
  \ phpapi#method('pop(', 'void)', 'bool'),
  \ phpapi#method('popClipPath(', 'void)', 'bool'),
  \ phpapi#method('popDefs(', 'void)', 'bool'),
  \ phpapi#method('popPattern(', 'void)', 'bool'),
  \ phpapi#method('push(', 'void)', 'bool'),
  \ phpapi#method('pushClipPath(', 'string $clip_mask_id)', 'bool'),
  \ phpapi#method('pushDefs(', 'void)', 'bool'),
  \ phpapi#method('pushPattern(', 'string $pattern_id , float $x , float $y , float $width , float $height)', 'bool'),
  \ phpapi#method('rectangle(', 'float $x1 , float $y1 , float $x2 , float $y2)', 'bool'),
  \ phpapi#method('render(', 'void)', 'bool'),
  \ phpapi#method('rotate(', 'float $degrees)', 'bool'),
  \ phpapi#method('roundRectangle(', 'float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry)', 'bool'),
  \ phpapi#method('scale(', 'float $x , float $y)', 'bool'),
  \ phpapi#method('setClipPath(', 'string $clip_mask)', 'bool'),
  \ phpapi#method('setClipRule(', 'int $fill_rule)', 'bool'),
  \ phpapi#method('setClipUnits(', 'int $clip_units)', 'bool'),
  \ phpapi#method('setFillAlpha(', 'float $opacity)', 'bool'),
  \ phpapi#method('setFillColor(', 'ImagickPixel $fill_pixel)', 'bool'),
  \ phpapi#method('setFillOpacity(', 'float $fillOpacity)', 'bool'),
  \ phpapi#method('setFillPatternURL(', 'string $fill_url)', 'bool'),
  \ phpapi#method('setFillRule(', 'int $fill_rule)', 'bool'),
  \ phpapi#method('setFont(', 'string $font_name)', 'bool'),
  \ phpapi#method('setFontFamily(', 'string $font_family)', 'bool'),
  \ phpapi#method('setFontSize(', 'float $pointsize)', 'bool'),
  \ phpapi#method('setFontStretch(', 'int $fontStretch)', 'bool'),
  \ phpapi#method('setFontStyle(', 'int $style)', 'bool'),
  \ phpapi#method('setFontWeight(', 'int $font_weight)', 'bool'),
  \ phpapi#method('setGravity(', 'int $gravity)', 'bool'),
  \ phpapi#method('setStrokeAlpha(', 'float $opacity)', 'bool'),
  \ phpapi#method('setStrokeAntialias(', 'bool $stroke_antialias)', 'bool'),
  \ phpapi#method('setStrokeColor(', 'ImagickPixel $stroke_pixel)', 'bool'),
  \ phpapi#method('setStrokeDashArray(', 'array $dashArray)', 'bool'),
  \ phpapi#method('setStrokeDashOffset(', 'float $dash_offset)', 'bool'),
  \ phpapi#method('setStrokeLineCap(', 'int $linecap)', 'bool'),
  \ phpapi#method('setStrokeLineJoin(', 'int $linejoin)', 'bool'),
  \ phpapi#method('setStrokeMiterLimit(', 'int $miterlimit)', 'bool'),
  \ phpapi#method('setStrokeOpacity(', 'float $stroke_opacity)', 'bool'),
  \ phpapi#method('setStrokePatternURL(', 'string $stroke_url)', 'bool'),
  \ phpapi#method('setStrokeWidth(', 'float $stroke_width)', 'bool'),
  \ phpapi#method('setTextAlignment(', 'int $alignment)', 'bool'),
  \ phpapi#method('setTextAntialias(', 'bool $antiAlias)', 'bool'),
  \ phpapi#method('setTextDecoration(', 'int $decoration)', 'bool'),
  \ phpapi#method('setTextEncoding(', 'string $encoding)', 'bool'),
  \ phpapi#method('setTextUnderColor(', 'ImagickPixel $under_color)', 'bool'),
  \ phpapi#method('setVectorGraphics(', 'string $xml)', 'bool'),
  \ phpapi#method('setViewbox(', 'int $x1 , int $y1 , int $x2 , int $y2)', 'bool'),
  \ phpapi#method('skewX(', 'float $degrees)', 'bool'),
  \ phpapi#method('skewY(', 'float $degrees)', 'bool'),
  \ phpapi#method('translate(', 'float $x , float $y)', 'bool'),
  \ ])

call phpapi#class('ImagickPixel', '', [
  \ phpapi#method('clear(', 'void)', 'bool'),
  \ phpapi#method('destroy(', 'void)', 'bool'),
  \ phpapi#method('getColor(', '[ bool $normalized = false ])', 'array'),
  \ phpapi#method('getColorAsString(', 'void)', 'string'),
  \ phpapi#method('getColorCount(', 'void)', 'int'),
  \ phpapi#method('getColorValue(', 'int $color)', 'float'),
  \ phpapi#method('getHSL(', 'void)', 'array'),
  \ phpapi#method('setColor(', 'string $color)', 'bool'),
  \ phpapi#method('setColorValue(', 'int $color , float $value)', 'bool'),
  \ phpapi#method('setHSL(', 'float $hue , float $saturation , float $luminosity)', 'bool'),
  \ ])

call phpapi#class('ImagickPixelIterator', '', [
  \ phpapi#method('clear(', 'void)', 'bool'),
  \ phpapi#method('destroy(', 'void)', 'bool'),
  \ phpapi#method('getCurrentIteratorRow(', 'void)', 'array'),
  \ phpapi#method('getIteratorRow(', 'void)', 'int'),
  \ phpapi#method('getNextIteratorRow(', 'void)', 'array'),
  \ phpapi#method('getPreviousIteratorRow(', 'void)', 'array'),
  \ phpapi#method('newPixelIterator(', 'Imagick $wand)', 'bool'),
  \ phpapi#method('newPixelRegionIterator(', 'Imagick $wand , int $x , int $y , int $columns , int $rows)', 'bool'),
  \ phpapi#method('resetIterator(', 'void)', 'bool'),
  \ phpapi#method('setIteratorFirstRow(', 'void)', 'bool'),
  \ phpapi#method('setIteratorLastRow(', 'void)', 'bool'),
  \ phpapi#method('setIteratorRow(', 'int $row)', 'bool'),
  \ phpapi#method('syncIterator(', 'void)', 'bool'),
  \ ])

call phpapi#class('Lob', '', [
  \ phpapi#method('append(', 'OCI-Lob $lob_from)', 'bool OCI'),
  \ phpapi#method('close(', 'void)', 'bool OCI'),
  \ phpapi#method('eof(', 'void)', 'bool OCI'),
  \ phpapi#method('erase(', '[ int $offset [, int $length ]])', 'int OCI'),
  \ phpapi#method('export(', 'string $filename [, int $start [, int $length ]])', 'bool OCI'),
  \ phpapi#method('flush(', '[ int $flag ])', 'bool OCI'),
  \ phpapi#method('free(', 'void)', 'bool OCI'),
  \ phpapi#method('getBuffering(', 'void)', 'bool OCI'),
  \ phpapi#method('import(', 'string $filename)', 'bool OCI'),
  \ phpapi#method('load(', 'void)', 'string OCI'),
  \ phpapi#method('read(', 'int $length)', 'string OCI'),
  \ phpapi#method('rewind(', 'void)', 'bool OCI'),
  \ phpapi#method('save(', 'string $data [, int $offset ])', 'bool OCI'),
  \ phpapi#method('seek(', 'int $offset [, int $whence = OCI_SEEK_SET ])', 'bool OCI'),
  \ phpapi#method('setBuffering(', 'bool $on_off)', 'bool OCI'),
  \ phpapi#method('size(', 'void)', 'int OCI'),
  \ phpapi#method('tell(', 'void)', 'int OCI'),
  \ phpapi#method('truncate(', '[ int $length = 0 ])', 'bool OCI'),
  \ phpapi#method('write(', 'string $data [, int $length ])', 'int OCI'),
  \ phpapi#method('writeTemporary(', 'string $data [, int $lob_type = OCI_TEMP_CLOB ])', 'bool OCI'),
  \ ])

call phpapi#class('PDO', '', [
  \ phpapi#method('cubrid_schema(', 'int $schema_type [, string $table_name [, string $col_name ]])', 'array'),
  \ phpapi#method('pgsqlLOBCreate(', 'void)', 'string'),
  \ phpapi#method('pgsqlLOBOpen(', 'string $oid [, string $mode = "rb" ])', 'resource'),
  \ phpapi#method('pgsqlLOBUnlink(', 'string $oid)', 'bool'),
  \ phpapi#method('sqliteCreateAggregate(', 'string $function_name , callback $step_func , callback $finalize_func [, int $num_args ])', 'bool'),
  \ phpapi#method('sqliteCreateFunction(', 'string $function_name , callback $callback [, int $num_args ])', 'bool'),
  \ ])

call phpapi#class('SAMConnection', '', [
  \ phpapi#method('commit(', 'void)', 'bool'),
  \ phpapi#method('connect(', 'string $protocol [, array $properties ])', 'bool'),
  \ phpapi#method('disconnect(', 'void)', 'bool'),
  \ phpapi#method('isConnected(', 'void)', 'bool'),
  \ phpapi#method('peek(', 'string $target [, array $properties ])', 'SAMMessage'),
  \ phpapi#method('peekAll(', 'string $target [, array $properties ])', 'array'),
  \ phpapi#method('receive(', 'string $target [, array $properties ])', 'SAMMessage'),
  \ phpapi#method('remove(', 'string $target [, array $properties ])', 'SAMMessage'),
  \ phpapi#method('rollback(', 'void)', 'bool'),
  \ phpapi#method('send(', 'string $target , SAMMessage $msg [, array $properties ])', 'string'),
  \ phpapi#method('subscribe(', 'string $targetTopic)', 'string'),
  \ phpapi#method('unsubscribe(', 'string $subscriptionId [, string $targetTopic ])', 'bool'),
  \ ])

call phpapi#class('SCA', '', [
  \ phpapi#method('createDataObject(', 'string $type_namespace_uri , string $type_name)', 'SDO_DataObject'),
  \ phpapi#method('getService(', 'string $target [, string $binding [, array $config ]])', 'mixed'),
  \ ])

call phpapi#class('SCA_LocalProxy', '', [
  \ phpapi#method('createDataObject(', 'string $type_namespace_uri , string $type_name)', 'SDO_DataObject'),
  \ ])

call phpapi#class('SCA_SoapProxy', '', [
  \ phpapi#method('createDataObject(', 'string $type_namespace_uri , string $type_name)', 'SDO_DataObject'),
  \ ])

call phpapi#class('SDO_DAS_ChangeSummary', '', [
  \ phpapi#method('beginLogging(', 'void)', 'void'),
  \ phpapi#method('endLogging(', 'void)', 'void'),
  \ phpapi#method('getChangeType(', 'SDO_DataObject $dataObject)', 'int'),
  \ phpapi#method('getChangedDataObjects(', 'void)', 'SDO_List'),
  \ phpapi#method('getOldContainer(', 'SDO_DataObject $data_object)', 'SDO_DataObject'),
  \ phpapi#method('getOldValues(', 'SDO_DataObject $data_object)', 'SDO_List'),
  \ phpapi#method('isLogging(', 'void)', 'bool'),
  \ ])

call phpapi#class('SDO_DAS_DataFactory', '', [
  \ phpapi#method('addPropertyToType(', 'string $parent_type_namespace_uri , string $parent_type_name , string $property_name , string $type_namespace_uri , string $type_name [, array $options ])', 'void'),
  \ phpapi#method('addType(', 'string $type_namespace_uri , string $type_name [, array $options ])', 'void'),
  \ phpapi#method('getDataFactory(', 'void)', 'SDO_DAS_DataFactory'),
  \ ])

call phpapi#class('SDO_DAS_DataObject', '', [
  \ phpapi#method('getChangeSummary(', 'void)', 'SDO_DAS_ChangeSummary'),
  \ ])

call phpapi#class('SDO_DAS_Relational', '', [
  \ phpapi#method('applyChanges(', 'PDO $database_handle , SDODataObject $root_data_object)', 'void'),
  \ phpapi#method('createRootDataObject(', 'void)', 'SDODataObject'),
  \ phpapi#method('executePreparedQuery(', 'PDO $database_handle , PDOStatement $prepared_statement , array $value_list [, array $column_specifier ])', 'SDODataObject'),
  \ phpapi#method('executeQuery(', 'PDO $database_handle , string $SQL_statement [, array $column_specifier ])', 'SDODataObject'),
  \ ])

call phpapi#class('SDO_DAS_Setting', '', [
  \ phpapi#method('getListIndex(', 'void)', 'int'),
  \ phpapi#method('getPropertyIndex(', 'void)', 'int'),
  \ phpapi#method('getPropertyName(', 'void)', 'string'),
  \ phpapi#method('getValue(', 'void)', 'mixed'),
  \ phpapi#method('isSet(', 'void)', 'bool'),
  \ ])

call phpapi#class('SDO_DAS_XML', '', [
  \ phpapi#method('addTypes(', 'string $xsd_file)', 'void'),
  \ phpapi#method('create(', '[ mixed $xsd_file [, string $key ]])', 'SDO_DAS_XML'),
  \ phpapi#method('createDataObject(', 'string $namespace_uri , string $type_name)', 'SDO_DataObject'),
  \ phpapi#method('createDocument(', '[ string $document_element_name ])', 'SDO_DAS_XML_Document'),
  \ phpapi#method('loadFile(', 'string $xml_file)', 'SDO_XMLDocument'),
  \ phpapi#method('loadString(', 'string $xml_string)', 'SDO_DAS_XML_Document'),
  \ phpapi#method('saveFile(', 'SDO_XMLDocument $xdoc , string $xml_file [, int $indent ])', 'void'),
  \ phpapi#method('saveString(', 'SDO_XMLDocument $xdoc [, int $indent ])', 'string'),
  \ ])

call phpapi#class('SDO_DAS_XML_Document', '', [
  \ phpapi#method('getRootDataObject(', 'void)', 'SDO_DataObject'),
  \ phpapi#method('getRootElementName(', 'void)', 'string'),
  \ phpapi#method('getRootElementURI(', 'void)', 'string'),
  \ phpapi#method('setEncoding(', 'string $encoding)', 'void'),
  \ phpapi#method('setXMLDeclaration(', 'bool $xmlDeclatation)', 'void'),
  \ phpapi#method('setXMLVersion(', 'string $xmlVersion)', 'void'),
  \ ])

call phpapi#class('SDO_DataFactory', '', [
  \ phpapi#method('create(', 'string $type_namespace_uri , string $type_name)', 'void'),
  \ ])

call phpapi#class('SDO_DataObject', '', [
  \ phpapi#method('clear(', 'void)', 'void'),
  \ phpapi#method('createDataObject(', 'mixed $identifier)', 'SDO_DataObject'),
  \ phpapi#method('getContainer(', 'void)', 'SDO_DataObject'),
  \ phpapi#method('getSequence(', 'void)', 'SDO_Sequence'),
  \ phpapi#method('getTypeName(', 'void)', 'string'),
  \ phpapi#method('getTypeNamespaceURI(', 'void)', 'string'),
  \ ])

call phpapi#class('SDO_Exception', '', [
  \ phpapi#method('getCause(', 'void)', 'mixed'),
  \ ])

call phpapi#class('SDO_List', '', [
  \ phpapi#method('insert(', 'mixed $value [, int $index ])', 'void'),
  \ ])

call phpapi#class('SDO_Model_Property', '', [
  \ phpapi#method('getContainingType(', 'void)', 'SDO_Model_Type'),
  \ phpapi#method('getDefault(', 'void)', 'mixed'),
  \ phpapi#method('getName(', 'void)', 'string'),
  \ phpapi#method('getType(', 'void)', 'SDO_Model_Type'),
  \ phpapi#method('isContainment(', 'void)', 'bool'),
  \ phpapi#method('isMany(', 'void)', 'bool'),
  \ ])

call phpapi#class('SDO_Model_ReflectionDataObject', '', [
  \ phpapi#method('export(', 'SDO_Model_ReflectionDataObject $rdo [, bool $return ])', 'mixed'),
  \ phpapi#method('getContainmentProperty(', 'void)', 'SDO_Model_Property'),
  \ phpapi#method('getInstanceProperties(', 'void)', 'array'),
  \ phpapi#method('getType(', 'void)', 'SDO_Model_Type'),
  \ ])

call phpapi#class('SDO_Model_Type', '', [
  \ phpapi#method('getBaseType(', 'void)', 'SDO_Model_Type'),
  \ phpapi#method('getName(', 'void)', 'string'),
  \ phpapi#method('getNamespaceURI(', 'void)', 'string'),
  \ phpapi#method('getProperties(', 'void)', 'array'),
  \ phpapi#method('getProperty(', 'mixed $identifier)', 'SDO_Model_Property'),
  \ phpapi#method('isAbstractType(', 'void)', 'bool'),
  \ phpapi#method('isDataType(', 'void)', 'bool'),
  \ phpapi#method('isInstance(', 'SDO_DataObject $data_object)', 'bool'),
  \ phpapi#method('isOpenType(', 'void)', 'bool'),
  \ phpapi#method('isSequencedType(', 'void)', 'bool'),
  \ ])

call phpapi#class('SDO_Sequence', '', [
  \ phpapi#method('getProperty(', 'int $sequence_index)', 'SDO_Model_Property'),
  \ phpapi#method('insert(', 'mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier ]])', 'void'),
  \ phpapi#method('move(', 'int $toIndex, int $fromIndex)', 'void'),
  \ ])

call phpapi#class('SWFBitmap', '', [
  \ phpapi#method('getHeight(', 'void)', 'float'),
  \ phpapi#method('getWidth(', 'void)', 'float'),
  \ ])

call phpapi#class('SWFButton', '', [
  \ phpapi#method('addASound(', 'SWFSound $sound , int $flags)', 'SWFSoundInstance'),
  \ phpapi#method('addAction(', 'SWFAction $action , int $flags)', 'void'),
  \ phpapi#method('addShape(', 'SWFShape $shape , int $flags)', 'void'),
  \ phpapi#method('setAction(', 'SWFAction $action)', 'void'),
  \ phpapi#method('setDown(', 'SWFShape $shape)', 'void'),
  \ phpapi#method('setHit(', 'SWFShape $shape)', 'void'),
  \ phpapi#method('setMenu(', 'int $flag)', 'void'),
  \ phpapi#method('setOver(', 'SWFShape $shape)', 'void'),
  \ phpapi#method('setUp(', 'SWFShape $shape)', 'void'),
  \ ])

call phpapi#class('SWFDisplayItem', '', [
  \ phpapi#method('addAction(', 'SWFAction $action , int $flags)', 'void'),
  \ phpapi#method('addColor(', 'int $red , int $green , int $blue [, int $a ])', 'void'),
  \ phpapi#method('endMask(', 'void)', 'void'),
  \ phpapi#method('getRot(', 'void)', 'float'),
  \ phpapi#method('getX(', 'void)', 'float'),
  \ phpapi#method('getXScale(', 'void)', 'float'),
  \ phpapi#method('getXSkew(', 'void)', 'float'),
  \ phpapi#method('getY(', 'void)', 'float'),
  \ phpapi#method('getYScale(', 'void)', 'float'),
  \ phpapi#method('getYSkew(', 'void)', 'float'),
  \ phpapi#method('move(', 'float $dx , float $dy)', 'void'),
  \ phpapi#method('moveTo(', 'float $x , float $y)', 'void'),
  \ phpapi#method('multColor(', 'float $red , float $green , float $blue [, float $a ])', 'void'),
  \ phpapi#method('remove(', 'void)', 'void'),
  \ phpapi#method('rotate(', 'float $angle)', 'void'),
  \ phpapi#method('rotateTo(', 'float $angle)', 'void'),
  \ phpapi#method('scale(', 'float $dx , float $dy)', 'void'),
  \ phpapi#method('scaleTo(', 'float $x [, float $y ])', 'void'),
  \ phpapi#method('setDepth(', 'int $depth)', 'void'),
  \ phpapi#method('setMaskLevel(', 'int $level)', 'void'),
  \ phpapi#method('setMatrix(', 'float $a , float $b , float $c , float $d , float $x , float $y)', 'void'),
  \ phpapi#method('setName(', 'string $name)', 'void'),
  \ phpapi#method('setRatio(', 'float $ratio)', 'void'),
  \ phpapi#method('skewX(', 'float $ddegrees)', 'void'),
  \ phpapi#method('skewXTo(', 'float $degrees)', 'void'),
  \ phpapi#method('skewY(', 'float $ddegrees)', 'void'),
  \ phpapi#method('skewYTo(', 'float $degrees)', 'void'),
  \ ])

call phpapi#class('SWFFill', '', [
  \ phpapi#method('moveTo(', 'float $x , float $y)', 'void'),
  \ phpapi#method('rotateTo(', 'float $angle)', 'void'),
  \ phpapi#method('scaleTo(', 'float $x [, float $y ])', 'void'),
  \ phpapi#method('skewXTo(', 'float $x)', 'void'),
  \ phpapi#method('skewYTo(', 'float $y)', 'void'),
  \ ])

call phpapi#class('SWFFont', '', [
  \ phpapi#method('getAscent(', 'void)', 'float'),
  \ phpapi#method('getDescent(', 'void)', 'float'),
  \ phpapi#method('getLeading(', 'void)', 'float'),
  \ phpapi#method('getShape(', 'int $code)', 'string'),
  \ phpapi#method('getUTF8Width(', 'string $string)', 'float'),
  \ phpapi#method('getWidth(', 'string $string)', 'float'),
  \ ])

call phpapi#class('SWFFontChar', '', [
  \ phpapi#method('addChars(', 'string $char)', 'void'),
  \ phpapi#method('addUTF8Chars(', 'string $char)', 'void'),
  \ ])

call phpapi#class('SWFGradient', '', [
  \ phpapi#method('addEntry(', 'float $ratio , int $red , int $green , int $blue [, int $alpha = 255 ])', 'void'),
  \ ])

call phpapi#class('SWFMorph', '', [
  \ phpapi#method('getShape1(', 'void)', 'SWFShape'),
  \ phpapi#method('getShape2(', 'void)', 'SWFShape'),
  \ ])

call phpapi#class('SWFMovie', '', [
  \ phpapi#method('add(', 'object $instance)', 'mixed'),
  \ phpapi#method('addExport(', 'SWFCharacter $char , string $name)', 'void'),
  \ phpapi#method('addFont(', 'SWFFont $font)', 'mixed'),
  \ phpapi#method('importChar(', 'string $libswf , string $name)', 'SWFSprite'),
  \ phpapi#method('importFont(', 'string $libswf , string $name)', 'SWFFontChar'),
  \ phpapi#method('labelFrame(', 'string $label)', 'void'),
  \ phpapi#method('nextFrame(', 'void)', 'void'),
  \ phpapi#method('output(', '[ int $compression ])', 'int'),
  \ phpapi#method('remove(', 'object $instance)', 'void'),
  \ phpapi#method('save(', 'string $filename [, int $compression = -1 ])', 'int'),
  \ phpapi#method('saveToFile(', 'resource $x [, int $compression = -1 ])', 'int'),
  \ phpapi#method('setDimension(', 'float $width , float $height)', 'void'),
  \ phpapi#method('setFrames(', 'int $number)', 'void'),
  \ phpapi#method('setRate(', 'float $rate)', 'void'),
  \ phpapi#method('setbackground(', 'int $red , int $green , int $blue)', 'void'),
  \ phpapi#method('startSound(', 'SWFSound $sound)', 'SWFSoundInstance'),
  \ phpapi#method('stopSound(', 'SWFSound $sound)', 'void'),
  \ phpapi#method('streamMP3(', 'mixed $mp3file [, float $skip = 0 ])', 'int'),
  \ phpapi#method('writeExports(', 'void)', 'void'),
  \ ])

call phpapi#class('SWFShape', '', [
  \ phpapi#method('addFill(', 'int $red , int $green , int $blue [, int $alpha = 255 ])', 'SWFFill'),
  \ phpapi#method('drawArc(', 'float $r , float $startAngle , float $endAngle)', 'void'),
  \ phpapi#method('drawCircle(', 'float $r)', 'void'),
  \ phpapi#method('drawCubic(', 'float $bx , float $by , float $cx , float $cy , float $dx , float $dy)', 'int'),
  \ phpapi#method('drawCubicTo(', 'float $bx , float $by , float $cx , float $cy , float $dx , float $dy)', 'int'),
  \ phpapi#method('drawCurve(', 'float $controldx , float $controldy , float $anchordx , float $anchordy [, float $targetdx ], float $targetdy)', 'int'),
  \ phpapi#method('drawCurveTo(', 'float $controlx , float $controly , float $anchorx , float $anchory [, float $targetx ], float $targety)', 'int'),
  \ phpapi#method('drawGlyph(', 'SWFFont $font , string $character [, int $size ])', 'void'),
  \ phpapi#method('drawLine(', 'float $dx , float $dy)', 'void'),
  \ phpapi#method('drawLineTo(', 'float $x , float $y)', 'void'),
  \ phpapi#method('movePen(', 'float $dx , float $dy)', 'void'),
  \ phpapi#method('movePenTo(', 'float $x , float $y)', 'void'),
  \ phpapi#method('setLeftFill(', 'SWFGradient $fill)', 'void'),
  \ phpapi#method('setLine(', 'SWFShape $shape)', 'void'),
  \ phpapi#method('setRightFill(', 'SWFGradient $fill)', 'void'),
  \ ])

call phpapi#class('SWFSoundInstance', '', [
  \ phpapi#method('loopCount(', 'int $point)', 'void'),
  \ phpapi#method('loopInPoint(', 'int $point)', 'void'),
  \ phpapi#method('loopOutPoint(', 'int $point)', 'void'),
  \ phpapi#method('noMultiple(', 'void)', 'void'),
  \ ])

call phpapi#class('SWFSprite', '', [
  \ phpapi#method('add(', 'object $object)', 'void'),
  \ phpapi#method('labelFrame(', 'string $label)', 'void'),
  \ phpapi#method('nextFrame(', 'void)', 'void'),
  \ phpapi#method('remove(', 'object $object)', 'void'),
  \ phpapi#method('setFrames(', 'int $number)', 'void'),
  \ phpapi#method('startSound(', 'SWFSound $sount)', 'SWFSoundInstance'),
  \ phpapi#method('stopSound(', 'SWFSound $sount)', 'void'),
  \ ])

call phpapi#class('SWFText', '', [
  \ phpapi#method('addString(', 'string $string)', 'void'),
  \ phpapi#method('addUTF8String(', 'string $text)', 'void'),
  \ phpapi#method('getAscent(', 'void)', 'float'),
  \ phpapi#method('getDescent(', 'void)', 'float'),
  \ phpapi#method('getLeading(', 'void)', 'float'),
  \ phpapi#method('getUTF8Width(', 'string $string)', 'float'),
  \ phpapi#method('getWidth(', 'string $string)', 'float'),
  \ phpapi#method('moveTo(', 'float $x , float $y)', 'void'),
  \ phpapi#method('setColor(', 'int $red , int $green , int $blue [, int $a = 255 ])', 'void'),
  \ phpapi#method('setFont(', 'SWFFont $font)', 'void'),
  \ phpapi#method('setHeight(', 'float $height)', 'void'),
  \ phpapi#method('setSpacing(', 'float $spacing)', 'void'),
  \ ])

call phpapi#class('SWFTextField', '', [
  \ phpapi#method('addChars(', 'string $chars)', 'void'),
  \ phpapi#method('addString(', 'string $string)', 'void'),
  \ phpapi#method('align(', 'int $alignement)', 'void'),
  \ phpapi#method('setBounds(', 'float $width , float $height)', 'void'),
  \ phpapi#method('setColor(', 'int $red , int $green , int $blue [, int $a = 255 ])', 'void'),
  \ phpapi#method('setFont(', 'SWFFont $font)', 'void'),
  \ phpapi#method('setHeight(', 'float $height)', 'void'),
  \ phpapi#method('setIndentation(', 'float $width)', 'void'),
  \ phpapi#method('setLeftMargin(', 'float $width)', 'void'),
  \ phpapi#method('setLineSpacing(', 'float $height)', 'void'),
  \ phpapi#method('setMargins(', 'float $left , float $right)', 'void'),
  \ phpapi#method('setName(', 'string $name)', 'void'),
  \ phpapi#method('setPadding(', 'float $padding)', 'void'),
  \ phpapi#method('setRightMargin(', 'float $width)', 'void'),
  \ ])

call phpapi#class('SWFVideoStream', '', [
  \ phpapi#method('getNumFrames(', 'void)', 'int'),
  \ phpapi#method('setDimension(', 'int $x , int $y)', 'void'),
  \ ])

call phpapi#class('XPathContext', '', [
  \ phpapi#method('xpath_eval(', 'string $xpath_expression [, domnode $contextnode ])', 'XPathObject'),
  \ phpapi#method('xpath_eval_expression(', 'string $expression [, domnode $contextnode ])', 'XPathObject'),
  \ phpapi#method('xptr_eval(', 'string $eval_str [, domnode $contextnode ])', 'int'),
  \ ])

call phpapi#class('ZipArchive', '', [
  \ phpapi#method('addEmptyDir(', 'string $dirname)', 'bool'),
  \ phpapi#method('addFile(', 'string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]])', 'bool'),
  \ phpapi#method('addFromString(', 'string $localname , string $contents)', 'bool'),
  \ phpapi#method('close(', 'void)', 'bool'),
  \ phpapi#method('deleteIndex(', 'int $index)', 'bool'),
  \ phpapi#method('deleteName(', 'string $name)', 'bool'),
  \ phpapi#method('extractTo(', 'string $destination [, mixed $entries ])', 'bool'),
  \ phpapi#method('getArchiveComment(', '[ int $flags ])', 'string'),
  \ phpapi#method('getCommentIndex(', 'int $index [, int $flags ])', 'string'),
  \ phpapi#method('getCommentName(', 'string $name [, int $flags ])', 'string'),
  \ phpapi#method('getFromIndex(', 'int $index [, int $length = 0 [, int $flags ]])', 'mixed'),
  \ phpapi#method('getFromName(', 'string $name [, int $length = 0 [, int $flags ]])', 'mixed'),
  \ phpapi#method('getNameIndex(', 'int $index [, int $flags ])', 'string'),
  \ phpapi#method('getStatusString(', 'void)', 'string'),
  \ phpapi#method('getStream(', 'string $name)', 'resource'),
  \ phpapi#method('locateName(', 'string $name [, int $flags ])', 'mixed'),
  \ phpapi#method('open(', 'string $filename [, int $flags ])', 'mixed'),
  \ phpapi#method('renameIndex(', 'int $index , string $newname)', 'bool'),
  \ phpapi#method('renameName(', 'string $name , string $newname)', 'bool'),
  \ phpapi#method('setArchiveComment(', 'string $comment)', 'mixed'),
  \ phpapi#method('setCommentIndex(', 'int $index , string $comment)', 'mixed'),
  \ phpapi#method('setCommentName(', 'string $name , string $comment)', 'mixed'),
  \ phpapi#method('statIndex(', 'int $index [, int $flags ])', 'mixed'),
  \ phpapi#method('statName(', 'name $name [, int $flags ])', 'mixed'),
  \ phpapi#method('unchangeAll(', 'void)', 'mixed'),
  \ phpapi#method('unchangeArchive(', 'void)', 'mixed'),
  \ phpapi#method('unchangeIndex(', 'int $index)', 'mixed'),
  \ phpapi#method('unchangeName(', 'string $name)', 'mixed'),
  \ ])

call phpapi#class('hw_api', '', [
  \ phpapi#method('checkin(', 'array $parameter)', 'bool'),
  \ phpapi#method('checkout(', 'array $parameter)', 'bool'),
  \ phpapi#method('children(', 'array $parameter)', 'array'),
  \ phpapi#method('copy(', 'array $parameter)', 'hw_api_content'),
  \ phpapi#method('dbstat(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('dcstat(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('dstanchors(', 'array $parameter)', 'array'),
  \ phpapi#method('dstofsrcanchor(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('find(', 'array $parameter)', 'array'),
  \ phpapi#method('ftstat(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('hwstat(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('identify(', 'array $parameter)', 'bool'),
  \ phpapi#method('info(', 'array $parameter)', 'array'),
  \ phpapi#method('insert(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('insertanchor(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('insertcollection(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('insertdocument(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('link(', 'array $parameter)', 'bool'),
  \ phpapi#method('lock(', 'array $parameter)', 'bool'),
  \ phpapi#method('move(', 'array $parameter)', 'bool'),
  \ phpapi#method('object(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('objectbyanchor(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('parents(', 'array $parameter)', 'array'),
  \ phpapi#method('remove(', 'array $parameter)', 'bool'),
  \ phpapi#method('replace(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('setcommittedversion(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('srcanchors(', 'array $parameter)', 'array'),
  \ phpapi#method('srcsofdst(', 'array $parameter)', 'array'),
  \ phpapi#method('unlock(', 'array $parameter)', 'bool'),
  \ phpapi#method('user(', 'array $parameter)', 'hw_api_object'),
  \ phpapi#method('userlist(', 'array $parameter)', 'array'),
  \ ])

call phpapi#class('hw_api_attribute', '', [
  \ phpapi#method('key(', 'void)', 'string'),
  \ phpapi#method('langdepvalue(', 'string $language)', 'string'),
  \ phpapi#method('value(', 'void)', 'string'),
  \ phpapi#method('values(', 'void)', 'array'),
  \ ])

call phpapi#class('hw_api_content', '', [
  \ phpapi#method('mimetype(', 'void)', 'string'),
  \ phpapi#method('read(', 'string $buffer , int $len)', 'string'),
  \ ])

call phpapi#class('hw_api_error', '', [
  \ phpapi#method('count(', 'void)', 'int'),
  \ phpapi#method('reason(', 'void)', 'HW_API_Reason'),
  \ ])

call phpapi#class('hw_api_object', '', [
  \ phpapi#method('assign(', 'array $parameter)', 'bool'),
  \ phpapi#method('attreditable(', 'array $parameter)', 'bool'),
  \ phpapi#method('count(', 'array $parameter)', 'int'),
  \ phpapi#method('insert(', 'HW_API_Attribute $attribute)', 'bool'),
  \ phpapi#method('remove(', 'string $name)', 'bool'),
  \ phpapi#method('title(', 'array $parameter)', 'string'),
  \ phpapi#method('value(', 'string $name)', 'string'),
  \ ])

call phpapi#class('hw_api_reason', '', [
  \ phpapi#method('description(', 'void)', 'string'),
  \ phpapi#method('type(', 'void)', 'HW_API_Reason'),
  \ ])

